resource "aws_security_group" "security_groups" {
  count = length(var.security_groups)

  name        = var.security_groups[count.index].name
  description = var.security_groups[count.index].description

  # Ingress rules
  dynamic "ingress" {
    for_each = var.security_groups[count.index].ingress
    content {
      from_port   = ingress.value.from_port
      to_port     = ingress.value.to_port
      protocol    = ingress.value.protocol
      cidr_blocks = ingress.value.cidr_blocks
    }
  }

  # Egress rules
  dynamic "egress" {
    for_each = var.security_groups[count.index].egress
    content {
      from_port   = egress.value.from_port
      to_port     = egress.value.to_port
      protocol    = egress.value.protocol
      cidr_blocks = egress.value.cidr_blocks
    }
  }
}

variable "security_groups" {
  type = list(object({
    name        = string
    description = string
    ingress     = list(object({
      from_port   = number
      to_port     = number
      protocol    = string
      cidr_blocks = list(string)
    }))
    egress      = list(object({
      from_port   = number
      to_port     = number
      protocol    = string
      cidr_blocks = list(string)
    }))
  }))
  default = []
}

output "security_group_ids_map" {
  value = { for sg in aws_security_group.security_groups : sg.name => sg.id }
}\

 security_groups = [
    {
      name        = "example-sg-1"
      description = "Example Security Group 1"
      ingress     = [
        {
          from_port   = 80
          to_port     = 80
          protocol    = "tcp"
          cidr_blocks = ["0.0.0.0/0"]
        },
      ]
      egress      = [
        {
          from_port   = 0
          to_port     = 65535
          protocol    = "tcp"
          cidr_blocks = ["0.0.0.0/0"]
        },
      ]
    },
    {
      name        = "example-sg-2"
      description = "Example Security Group 2"
      ingress     = [
        {
          from_port   = 22
          to_port     = 22
          protocol    = "tcp"
          cidr_blocks = ["10.0.0.0/16"]
        },
      ]
      egress      = [
        {
          from_port   = 0
          to_port     = 65535
          protocol    = "tcp"
          cidr_blocks = ["0.0.0.0/0"]
        },
      ]
    },
  ]
}


services = {
│    2:   service_2 = {
│    3:     key_name               = "us-west-1"
│    4:     subnet_name            = "primary-usw1-az3"
│    5:     iam_instance_profile   = "test_instance"
│    6:     instance_type          = "c6g.8xlarge"
│    7:     root_volume_size       = 40
│    8:     root_volume_iops       = 3000
│    9:     root_volume_throughput = 125
│   10:     user_data              = null
│   11:     count                  = 3
│   12:     tags = {
│   13:       "Name"      = "us-west-1-test-ec2"
│   14:       "SDMRole"   = "dgdgdfg"
│   15:       "Component" = "dfgdgdfg"
│   16:       "Type"      = "reserve-adserver"
│   17:       "CostGroup" = "test"
│   18:     }
│   19:     volume_tags = {
│   20:       "Name" = "us-west-1-test-ec2"
│   21:     }
│   22:     ami_filters = [
│   23:       {
│   24:         name   = "name"
│   25:         values = ["test-image*"]
│   26:       }
│   27:     ]
│   28:   }
│   29: }

variable "services" {
  type = map(object({
    instance_type        = string
    key_name             = string
    count                = number
    iam_instance_profile = string
    user_data            = string
    root_volume_size     = number
    root_volume_iops     = number
    tags                 = map(string)
    volume_tags          = map(string)
    ami_filters          = list(string)
    subnet_name          = string
  }))
}


